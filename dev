#!/usr/bin/env bash

UNAMEOUT="$(uname -s)"

# Verify operating system is supported...
case "${UNAMEOUT}" in
    Linux*)             MACHINE=linux;;
    Darwin*)            MACHINE=mac;;
    *)                  MACHINE="UNKNOWN"
esac

if [ "$MACHINE" == "UNKNOWN" ]; then
    echo "Unsupported operating system [$(uname -s)]. Script supports macOS, Linux, and Windows (WSL2)." >&2

    exit 1
fi

# Determine if stdout is a terminal...
if test -t 1; then
    # Determine if colors are supported...
    ncolors=$(tput colors)

    if test -n "$ncolors" && test "$ncolors" -ge 8; then
        BOLD="$(tput bold)"
        YELLOW="$(tput setaf 3)"
        GREEN="$(tput setaf 2)"
        NC="$(tput sgr0)"
    fi
fi

# Source the ".env.example" file so environment variables are available...
if [ -f ./.env ]; then
    source ./.env

    difflines=$(awk -F= '{print $1}' .env | diff <(awk -F= '{print $1}' .env.example) - | wc -l)
    if test "$difflines" -gt 0; then
      echo "${YELLOW}.env is not up-to-date with .env.example${NC}" >&2
    fi
else
    echo "${YELLOW}Could not find .env file. Please copy from .env.example.${NC}" >&2
fi

export APP_SERVICE=${APP_SERVICE:-"php"}
export MYSQL_SERVICE=${MYSQL_SERVICE:-"mysql"}


ARGS=()

# Proxy PHP commands to the "php" binary on the application container...
if [ "$1" == "php" ]; then
    shift 1

    ARGS+=(exec -u dev -w /app)
    [ ! -t 0 ] && ARGS+=(-T)
    ARGS+=("$APP_SERVICE" "php" "$@")

elif [ "$1" == "npm" ]; then
    shift 1

    ARGS+=(exec -u dev -w /app)
    [ ! -t 0 ] && ARGS+=(-T)
    ARGS+=("$APP_SERVICE" "npm" "$@")

# update both composer and npm and builds js
elif [ "$1" == "update" ]; then
    shift 1
    docker-compose exec -u dev -w /app "${APP_SERVICE}" composer update
    docker-compose exec -u dev -w /app "${APP_SERVICE}" npm update
    docker-compose exec -u dev -w /app "${APP_SERVICE}" npm run build
    exit

# Proxy vendor binary commands on the application container...
elif [ "$1" == "bin" ]; then
    shift 1

    ARGS+=(exec -u dev -w /app)
    [ ! -t 0 ] && ARGS+=(-T)
    ARGS+=("$APP_SERVICE" ./vendor/bin/"$@")

# up -d
elif [ "$1" == "up" ]; then
    shift 1

    ARGS+=(up -d)

# rebuild
elif [ "$1" == "rebuild" ]; then
    shift 1

    ARGS+=(up -d --build)

# bash
elif [ "$1" == "bash" ]; then
    shift 1

    ARGS+=(exec -u dev -w /app)
    [ ! -t 0 ] && ARGS+=(-T)
    ARGS+=("$APP_SERVICE" "bash" "$@")

# init
elif [ "$1" == "rebuild-db" ]; then
    shift 1
    docker-compose down
    docker volume rm pulse_mysql_data
    docker-compose up -d
    exit


# init
elif [ "$1" == "init" ]; then
    echo 'INIT!~'
    shift 1
    docker-compose exec -u dev -w /app "${APP_SERVICE}" composer install
    #docker-compose exec -u dev -w /app "${APP_SERVICE}" composer run post-install-cmd
    exit

# Proxy Composer commands to the "composer" binary on the application container...
elif [ "$1" == "composer" ]; then
    shift 1

    ARGS+=(exec -u dev -w /app)
    [ ! -t 0 ] && ARGS+=(-T)
    ARGS+=("$APP_SERVICE" "composer" "$@")

# Proxy the "phpunit" command to "php vendor/bin/phpunit"...
elif [ "$1" == "phpunit" ]; then
    shift 1

    ARGS+=(exec -u dev -w /app)
    [ ! -t 0 ] && ARGS+=(-T)
    ARGS+=("$APP_SERVICE" php vendor/bin/phpunit "$@")

# Proxy the "phpstan" command to "php vendor/bin/phpstan"...
elif [ "$1" == "phpstan" ]; then
    shift 1

    ARGS+=(exec -u dev -w /app)
    [ ! -t 0 ] && ARGS+=(-T)
    ARGS+=("$APP_SERVICE" php vendor/bin/phpstan "$@")

# Initiate a MySQL CLI terminal session within the "mysql" container...
elif [ "$1" == "mysql" ]; then
    shift 1

    ARGS+=(exec)
    [ ! -t 0 ] && ARGS+=(-T)
    ARGS+=("$MYSQL_SERVICE" bash -c)
    ARGS+=("MYSQL_PWD=\${MYSQL_PASSWORD} mysql -u \${MYSQL_USER} \${MYSQL_DATABASE}")

# Edit or restore a vendor package
elif [ "$1" == "vendor" ]; then
    shift 1

    if ([ "$1" != "edit" ] && [ "$1" != "restore" ]) || [ "$2" == "" ]; then
        echo "Syntax: ./dev {edit|restore} <vendor/package>"
        exit
    fi

    source=$(./dev bash -c "grep -A 10 '\"name\": \"$2\",' composer.lock" | grep -A 5 '"source": {' | grep -A 5 '"type": "git",')
    url=$(echo "$source" | grep '"url":' | cut -d '"' -f 4)
    ref=$(echo "$source" | grep '"reference":' | cut -d '"' -f 4)

    if [ "$url" == "" ] || [ "$ref" == "" ]; then
        echo "Could not find package $2 in composer.lock"
        exit
    fi

    if [ "$1" == "edit" ]; then
        echo "Cloning $url @ $ref into vendor/$2..."
        ./dev bash -c "rm -rf 'vendor/$2' && git clone '$url' 'vendor/$2' && cd 'vendor/$2' && git checkout '$ref'"
        echo ""
        echo "Done cloning, you may want to checkout another branch before making changes"
    elif [ "$1" == "restore" ]; then
        ./dev bash -c "rm -rf 'vendor/$2' && composer install"
    fi

    exit

# Pass unknown commands to the "docker-compose" binary...
else
    ARGS+=("$@")
fi

# Run Docker Compose with the defined arguments...
docker-compose "${ARGS[@]}"
